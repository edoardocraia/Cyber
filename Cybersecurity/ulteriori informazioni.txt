Ecco una versione semplificata dello script che si concentra solo sulle operazioni essenziali per ripristinare e configurare un firewall di base. È stato ridotto per gestire esclusivamente iptables, mantenendo comunque un buon livello di protezione.

Script semplificato:
#!/bin/bash

# Script per ricreare una configurazione di base del firewall
echo "Inizio configurazione del firewall..."

# 1. Resetta le regole esistenti
iptables -F
iptables -X
iptables -Z

# 2. Configura regole di base
# Blocca tutto il traffico in entrata di default
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT ACCEPT

# Consenti connessioni esistenti e loopback
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -i lo -j ACCEPT

# Abilita SSH
iptables -A INPUT -p tcp --dport 22 -j ACCEPT

# 3. Salva la configurazione
iptables-save > /etc/iptables/rules.v4

echo "Configurazione completata. Firewall attivo con regole di base."


Cosa fa:
Resetta le regole:
Elimina tutte le regole esistenti per partire da una configurazione pulita.

Imposta regole di base:
Blocca tutto il traffico in entrata e di inoltro (INPUT, FORWARD), consentendo solo il traffico in uscita (OUTPUT).
Permette connessioni esistenti e traffico di loopback (indispensabile per la funzionalità locale del sistema).
Consente accessi SSH (porta 22) per la gestione remota.

Salva la configurazione:
Esporta le regole in /etc/iptables/rules.v4, per mantenerle persistenti al riavvio.

Come usarlo:
Salva lo script in un file chiamato, ad esempio, simple_firewall.sh.

Rendi il file eseguibile:
chmod +x simple_firewall.sh

Esegui lo script come root:
sudo ./simple_firewall.sh

Note:
Persistenza: Lo script salva le regole in /etc/iptables/rules.v4. Assicurati che il sistema carichi queste regole al boot, ad esempio usando il servizio netfilter-persistent:
sudo apt install iptables-persistent
sudo systemctl enable netfilter-persistent
Ulteriori personalizzazioni: Puoi aggiungere regole per abilitare altre porte, se necessario, modificando lo script.


Con questa configurazione posso accedere a internet?
Sì, con questa configurazione è possibile accedere a internet dal sistema. Questo perché:

OUTPUT è impostato su ACCEPT: consente tutto il traffico in uscita, quindi la macchina può effettuare richieste verso internet (es. navigazione web, aggiornamenti, etc.).
Il traffico di risposta ai pacchetti inviati (es. una risposta da un server web) viene accettato grazie alla regola ESTABLISHED,RELATED:

iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
Come vedere le porte aperte
Puoi vedere le porte aperte usando diversi comandi:

1. Con netstat:
netstat -tuln
-t: Mostra connessioni TCP.
-u: Mostra connessioni UDP.
-l: Mostra porte in ascolto (listening).
-n: Mostra indirizzi in formato numerico.

2. Con ss (consigliato per sistemi moderni):
ss -tuln
Output simile a netstat, ma più veloce e aggiornato.

3. Con nmap (scansione da un'altra macchina):
Se hai un altro sistema sulla stessa rete, puoi eseguire una scansione della macchina target per vedere quali porte sono accessibili:

nmap -sT -p- <IP_TARGET>
-sT: Esegue una scansione TCP.
-p-: Scansiona tutte le porte.
Come testare lo script


Ecco i passi per verificare il corretto funzionamento del firewall:

1. Controlla le regole attive
Dopo aver eseguito lo script, verifica che le regole siano applicate:

sudo iptables -L -v
Questo comando mostra le regole attive con dettagli sui pacchetti e i byte che le hanno attraversate.

2. Testa l'accesso SSH
Da un'altra macchina, prova a connetterti via SSH alla macchina configurata:

ssh <utente>@<IP_MACCHINA>
Dovresti riuscire a connetterti, poiché la regola SSH consente l'accesso alla porta 22.

3. Prova connessioni esterne (ad esempio, navigazione o aggiornamenti)
Testa che il sistema possa accedere a internet:

ping google.com
sudo apt update
Se questi comandi funzionano, il traffico in uscita e le risposte funzionano correttamente.

4. Prova connessioni bloccate
Prova a collegarti da un'altra macchina usando una porta non consentita:
telnet <IP_MACCHINA> <PORTA_NON_CONSENTITA>

Ad esempio, se provi una porta diversa da 22, la connessione dovrebbe essere rifiutata.
Come bloccare l'accesso a internet

Se vuoi impedire che il sistema acceda a internet, puoi modificare lo script per bloccare anche il traffico in uscita:
iptables -P OUTPUT DROP
Puoi aggiungere eccezioni per servizi specifici (es. DNS o aggiornamenti) usando regole mirate:

iptables -A OUTPUT -p udp --dport 53 -j ACCEPT  # Consenti solo richieste DNS
iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT  # Consenti HTTP
iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT # Consenti HTTPS
Se hai dubbi o vuoi ulteriori dettagli su uno specifico comando o test, fammi sapere!


Ecco uno script Bash per configurare un database MySQL in modo che sia esposto solo su localhost, impedendo connessioni da altre macchine.

#!/bin/bash

# File di configurazione MySQL
MYSQL_CONFIG="/etc/mysql/my.cnf"

# Verifica se il file di configurazione esiste
if [ -f "$MYSQL_CONFIG" ]; then
    echo "Modifica del file di configurazione MySQL per limitare l'accesso a localhost..."

    # Cerca e modifica la direttiva 'bind-address' per limitare l'accesso a localhost
    if grep -q "bind-address" "$MYSQL_CONFIG"; then
        sed -i 's/^bind-address.*/bind-address = 127.0.0.1/' "$MYSQL_CONFIG"
        echo "Direttiva 'bind-address' aggiornata a 127.0.0.1 in $MYSQL_CONFIG."
    else
        echo "bind-address = 127.0.0.1" >> "$MYSQL_CONFIG"
        echo "Direttiva 'bind-address' aggiunta a $MYSQL_CONFIG."
    fi

    # Riavvia il servizio MySQL per applicare le modifiche
    echo "Riavvio del servizio MySQL..."
    systemctl restart mysql

    if [ $? -eq 0 ]; then
        echo "Il database MySQL ora è accessibile solo da localhost."
    else
        echo "Errore durante il riavvio del servizio MySQL. Controllare il file di configurazione."
        exit 1
    fi
else
    echo "Errore: Il file di configurazione $MYSQL_CONFIG non esiste. Verificare l'installazione di MySQL."
    exit 1
fi


Cosa fa lo script
Modifica il file di configurazione MySQL:

Cerca la direttiva bind-address nel file /etc/mysql/my.cnf.
Se presente, la modifica per limitare l'accesso a 127.0.0.1 (localhost).
Se assente, aggiunge la direttiva bind-address = 127.0.0.1 al file.
Riavvia il servizio MySQL:
Riavvia il servizio MySQL per applicare le modifiche al file di configurazione.

Mostra messaggi di conferma o errore:
Conferma che il database ora è limitato a localhost o segnala eventuali problemi.

Come testare
Verifica connessione locale: Dal sistema locale, prova a connetterti al database:
mysql -u root -p
Dovresti riuscire ad accedere.

Verifica connessione remota: Da un'altra macchina, prova a connetterti al database usando l'indirizzo IP del server:

mysql -h <IP_SERVER> -u root -p
La connessione dovrebbe essere rifiutata.

Controlla le porte aperte: Usa ss o netstat per confermare che MySQL sta ascoltando solo su 127.0.0.1:

ss -tuln | grep 3306
L'output dovrebbe mostrare qualcosa come:

tcp    LISTEN     127.0.0.1:3306


POSTGRES
Ecco uno script Bash per configurare PostgreSQL in modo che sia accessibile solo da localhost, impedendo connessioni da altre macchine.

#!/bin/bash

# File di configurazione PostgreSQL
PG_HBA_CONFIG="/etc/postgresql/14/main/pg_hba.conf"
PG_MAIN_CONFIG="/etc/postgresql/14/main/postgresql.conf"

# Verifica se i file di configurazione esistono
if [ -f "$PG_HBA_CONFIG" ] && [ -f "$PG_MAIN_CONFIG" ]; then
    echo "Modifica della configurazione di PostgreSQL per limitare l'accesso a localhost..."

    # Modifica il file postgresql.conf per limitare l'ascolto a localhost
    if grep -q "^#listen_addresses" "$PG_MAIN_CONFIG"; then
        sed -i "s/^#listen_addresses.*/listen_addresses = 'localhost'/" "$PG_MAIN_CONFIG"
    elif grep -q "^listen_addresses" "$PG_MAIN_CONFIG"; then
        sed -i "s/^listen_addresses.*/listen_addresses = 'localhost'/" "$PG_MAIN_CONFIG"
    else
        echo "listen_addresses = 'localhost'" >> "$PG_MAIN_CONFIG"
    fi
    echo "Configurazione 'listen_addresses' aggiornata in $PG_MAIN_CONFIG."

    # Modifica il file pg_hba.conf per consentire solo connessioni locali
    sed -i '/^host /s/^host/#host/' "$PG_HBA_CONFIG"
    echo "local   all             all                                     trust" > "$PG_HBA_CONFIG"
    echo "Modifica di $PG_HBA_CONFIG completata: consentite solo connessioni locali."

    # Riavvia il servizio PostgreSQL per applicare le modifiche
    echo "Riavvio del servizio PostgreSQL..."
    systemctl restart postgresql

    if [ $? -eq 0 ]; then
        echo "PostgreSQL è ora accessibile solo da localhost."
    else
        echo "Errore durante il riavvio del servizio PostgreSQL. Controllare i file di configurazione."
        exit 1
    fi
else
    echo "Errore: File di configurazione di PostgreSQL non trovati. Verificare l'installazione di PostgreSQL."
    exit 1
fi


Cosa fa lo script
Modifica postgresql.conf:

Cerca e modifica la direttiva listen_addresses per limitare l'ascolto a localhost.
Se la direttiva non è presente, la aggiunge alla fine del file.
Modifica pg_hba.conf:

Commenta tutte le righe host esistenti per disabilitare connessioni remote.
Consente solo connessioni locali con il metodo trust (è possibile cambiare trust in md5 per una maggiore sicurezza).
Riavvia il servizio PostgreSQL:

Riavvia il servizio PostgreSQL per applicare le modifiche.
Mostra messaggi di conferma o errore:

Conferma che PostgreSQL ora è limitato a localhost o segnala eventuali problemi.
Come testare
Verifica connessione locale: Dal sistema locale, prova a connetterti al database:

psql -U postgres
Dovresti riuscire ad accedere.

Verifica connessione remota: Da un'altra macchina, prova a connetterti al database usando l'indirizzo IP del server:

psql -h <IP_SERVER> -U postgres
La connessione dovrebbe essere rifiutata.

Controlla le porte aperte: Usa ss o netstat per confermare che PostgreSQL sta ascoltando solo su 127.0.0.1:

ss -tuln | grep 5432
L'output dovrebbe mostrare qualcosa come:

tcp    LISTEN     127.0.0.1:5432





Ecco come creare uno script Bash che modifica un file di configurazione generale. Lo script può gestire diversi scenari: commentare una linea, sostituire un valore esistente, o aggiungere una nuova configurazione se non è già presente.

Script Bash Generico per Modifica di un File di Configurazione

#!/bin/bash

CONFIG_FILE="/path/to/configuration/file"  # Sostituisci con il percorso del file di configurazione

# Verifica se il file esiste
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Errore: File di configurazione $CONFIG_FILE non trovato!"
    exit 1
fi

# Funzione per aggiornare o aggiungere una direttiva nel file di configurazione
update_config() {
    local directive="$1"
    local value="$2"
    if grep -q "^#*$directive" "$CONFIG_FILE"; then
        sed -i "s|^#*$directive.*|$directive = $value|" "$CONFIG_FILE"
        echo "Aggiornata direttiva '$directive' con valore '$value' in $CONFIG_FILE."
    else
        echo "$directive = $value" >> "$CONFIG_FILE"
        echo "Aggiunta direttiva '$directive' con valore '$value' in $CONFIG_FILE."
    fi
}

# Funzione per commentare una direttiva
comment_config() {
    local directive="$1"
    sed -i "s|^\($directive.*\)|#\1|" "$CONFIG_FILE"
    echo "Commentata direttiva '$directive' in $CONFIG_FILE."
}

# Funzione per rimuovere una direttiva
remove_config() {
    local directive="$1"
    sed -i "/^$directive/d" "$CONFIG_FILE"
    echo "Rimossa direttiva '$directive' da $CONFIG_FILE."
}

# Esempio di utilizzo delle funzioni
update_config "listen_addresses" "'localhost'"   # Aggiorna o aggiungi 'listen_addresses = 'localhost''
comment_config "external_access"                # Commenta una direttiva 'external_access'
remove_config "old_setting"                     # Rimuove 'old_setting' dal file

# Conclusione
echo "Modifiche al file $CONFIG_FILE completate."




Cosa fa lo script
Verifica il file di configurazione:

Se il file non esiste, restituisce un errore e termina.
Funzioni principali:

update_config: Cerca una direttiva nel file. Se esiste, aggiorna il valore. Se non esiste, la aggiunge alla fine.
comment_config: Commenta una direttiva esistente aggiungendo un # all'inizio della linea.
remove_config: Elimina completamente una direttiva dal file.
Esempi:

Modifica o aggiunge listen_addresses = 'localhost'.
Commenta una riga che inizia con external_access.
Rimuove la direttiva old_setting.
Esempio di Esecuzione
File di Configurazione Originale

Supponiamo che il file sia:

plaintext
listen_addresses = '0.0.0.0'
external_access = 'enabled'
old_setting = 'value'

Comando per Eseguire lo Script
chmod +x modify_config.sh
./modify_config.sh
Risultato Dopo l'Esecuzione

Il file diventa:
plaintext
listen_addresses = 'localhost'
#external_access = 'enabled'
La direttiva old_setting è stata rimossa.

Suggerimenti
Test in Sicurezza: Usa sed senza -i (modifica in-place) per testare il comportamento:

sed "s|^directive.*|replacement|" "$CONFIG_FILE"
Backup del File: Esegui sempre un backup prima di modificare file critici:

cp "$CONFIG_FILE" "${CONFIG_FILE}.backup"
Script Applicabile a Molti File: Per più file di configurazione, usa un loop:

for config in /path/to/configs/*.conf; do
    ./modify_config.sh "$config"
done